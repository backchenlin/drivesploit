require 'rex/exploitation/drivesploitparser'
module Rex
    module Exploitation 
        class DriveSploitRandomizer
            def self.obfuscate(val)
                DriveSploitRandomizer.new().obfuscate(val)
            end

            def initialize()
            end

            def obfuscate(val)
                @orig = val
                @jstree = Rex::Exploitation::DriveSploitParser.parse(@orig)

                @functions = get_functions(@jstree)
                @idents    = get_idents(@jstree)
                funcres = {}
                identres = {}

                @obfuscated = @orig

                @functions.each_key {|name|
                    random = (0...5+rand(5)).map{ ('a'..'z').to_a[rand(26)]}.join
                    funcres[name] = random
                    @obfuscated.gsub!(name, random )
                }

                @idents.each_key {|name|
                    random = (0...5+rand(5)).map{ ('a'..'z').to_a[rand(26)]}.join
                    identres[name] = random
                    @obfuscated.gsub!(name, random )
                }

                return [@obfuscated, funcres, identres]
            end


            def get_children (n)
                children = []
                attrs = [n.type, n.value, n.lineno, n.start, n.end, n.tokenizer, n.initializer,
                    n.name, n.params, n.funDecls, n.varDecls, n.body, n.functionForm,
                    n.assignOp, n.expression, n.condition, n.thenPart, n.elsePart,
                    n.readOnly, n.isLoop, n.setup, n.postfix, n.update, n.exception,
                    n.object, n.iterator, n.varDecl, n.label, n.target, n.tryBlock,
                    n.catchClauses, n.varName, n.guard, n.block, n.discriminant, n.cases,
                    n.defaultIndex, n.caseLabel, n.statements, n.statement]

                n.length.times do |i|
                    children.push(n[i]) if n[i] != n and n[i].class == Rex::Exploitation::DriveSploitParser::Node
                end

                attrs.length.times do |attr|
                    children.push(attrs[attr]) if attrs[attr].class == Rex::Exploitation::DriveSploitParser::Node and attrs[attr] != n
                end

                return children
            end

            def resolve_name (n)
                name = ""

                if n.type == $consts["DOT"]
                    name = resolve_name(n[0]) + "." + resolve_name(n[1])
                else # INDENTIFIER
                    name = n.value
                end

                return name

            end

            def get_functions (n, functions = nil)

                functions = {} unless functions

                function = nil
                name = nil

                if n.type == $consts["FUNCTION"] and n.name
                    function = n
                    name = n.name
                elsif n.type == $consts["ASSIGN"] && n[1].type == $consts["FUNCTION"] && !n[1].name
                    function = n[1]
                    name = resolve_name(n[0])
                end

                if function
                    functions[name] = function
                end

                children = get_children(n)
                children.length.times do |i|
                    get_functions(children[i], functions)
                end

                return functions
            end

            def get_idents (n, idents = nil)

                idents = {} unless idents

                ident = nil
                name = nil

                if n.type == $consts["IDENTIFIER"] and n.name
                    ident = n
                    name = n.name
                end

                if ident
                    idents[name] = ident
                end

                children = get_children(n)
                children.length.times do |i|
                    get_idents(children[i], idents)
                end

                return idents
            end
        end # class
    end # exploitation
end # rex


