require 'msf/core'
module Rex
    module Exploitation
        class HTTPClientUtils
            include Rex::Ui::Subscriber
            public_class_method :include
            def self.blacklist(address, request)
                h = HTTPClientUtils.new()
                return h.blacklist(address, request)
            end
            def self.serveonce(address)
                h = HTTPClientUtils.new()
                return h.serveonce(address)
            end
            def print_status(msg='')
                super("ST: " + msg)
            end
            def blacklist(address, request)
                ua = request.headers["User-Agent"]
                print_status("matching #{ua}")
                # dasient
                if /74.213.164..*/.match(address) or
                   /74.213.174..*/.match(address) or
                   /74.213.178..*/.match(address) or
                   /74.213.179..*/.match(address) or
                # qualys
                   /64.39.104..*/.match(address) or
                    print_status("blacklist: ip blacklisted")
                    return true
                end
                if /foo/.match(ua) or
                   /mycrawler/.match(ua) or
                   /dasient/.match(ua) or
                   /googlebot/.match(ua) or
                   /msnbot/.match(ua) or
                   /yahooseeker/.match(ua) or
                   /slurp/.match(ua) 
                   return true
                    print_status("blacklist: UA blacklisted")
                end
                return false
            end
            def serveonce(address)
                print_status("Serve Once check")
                return false
            end
            def initialize()
            end

        end
    end
end
